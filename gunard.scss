/*
*	This is Gunard, a simple-but-beautiful responsive grid built on SASS.
*
*	I was built by Joel Hans (http://designbyjoel.com).
*	Feel free to use this grid or adapt it to your own needs under the GPL license.
*	License: http://www.gnu.org/copyleft/gpl.html
*
*/

/* 
*	User-configurable variables
*
*	These allow you to customize how wide your grid will be,
*	as well as how many columns it has, and the width of the
*	gutters between them. Use reasonable math!
*/

$containerWidth :		960px;
$columnNumber	:		12;
$gutterWidth	:		20px;

/*
*	Standard styles for container, rows, columns.
*	
*	Nothing too special here, really.
*/

// http://paulirish.com/2012/box-sizing-border-box-ftw/
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }

.container { 
	position: relative; 
	width: $containerWidth;
	margin: 0 auto; 
	padding: 0;
}

.row {
	margin-bottom: 20px;
	zoom: 1;
}

[class*="column"] {
	margin-left: $gutterWidth / 2;
	margin-right: $gutterWidth / 2;
	float: left;
	display: inline;
}

/*
*	Columns
*	
*	Herein lies the SASS magic that builds the styles for
*	each column and the offsets. It will use the user-configurable 
*	variables for its logic.
*/

//	Basic columns.
@for $i from 1 through $columnNumber {
	.column-#{$i} {
		width: (($containerWidth / 12) * $i - 20);
	}
}

//	Offset columns.
@for $i from 1 through ($columnNumber - 1) {
	.offset-#{$i} {
		margin-left: (($containerWidth / 12) * $i + 10);
	}
}

//	Nested columns. Whoa, nelly! Check out these bad boys.
[class*="column"] > .row {
	margin-bottom: 0px;
}

[class*="column"] > .row > [class*="column"]:first-child {
	margin-left: 0px;
}

[class*="column"] > .row > [class*="column"]:last-child  {
	margin-right: 0px;
}

// Some final row fixes.
.row:before, .row:after {
	content: '\0020';
	display: block;
	overflow: hidden;
	visibility: hidden;
	width: 0;
	height: 0;
}

.row:after {
	clear: both;
}

/*
*	Responsiveness
*	
*	Now that we have the basic grid out of the way, we can
*	completely muck it up with some media queries based on
*	some good break points.
*/

@media only screen and (min-width: 768px) and (max-width: 959px) {

	$containerWidth: 768px;

	.container {
		width: $containerWidth;
	}

	@for $i from 1 through $columnNumber {
		.column-#{$i} {
			width: (($containerWidth / 12) * $i - 20);
		}
	}

	@for $i from 1 through ($columnNumber - 1) {
		.offset-#{$i} {
			margin-left: (($containerWidth / 12) * $i + 10);
		}
	}

}

@media only screen and (min-width: 480px) and (max-width: 767px) {

	$containerWidth: 420px;

	.container {
		width: $containerWidth;
	}

	[class*="column"] {
		width: $containerWidth;
		margin-left: 0px;
		margin-right: 0px;
		margin-bottom: 5px;
	}

	[class*="offset"] {
		margin-left: 0px;
	}

}

@media only screen and (max-width: 479px) {

	$containerWidth: 300px;

	.container {
		width: $containerWidth;
	}

	[class*="column"] {
		width: $containerWidth;
		margin-left: 0px;
		margin-right: 0px;
		margin-bottom: 5px;
	}

	[class*="offset"] {
		margin-left: 0px;
	}

}